using UnityEngine;
using System.Collections;
using System;
using System.Collections.Generic;
using Assets.script.common;
using LitJson;
using UnityEngine.UI;
using Assets.script.utils;

public class MainGame : MonoBehaviour {
    private long oldTick;
    private static long tickDelta = (long)(0.5 * 10000000);// 单位是100毫微秒，即2s更新一次
    public GameObject menuPanelObj;

    // Use this for initialization
    void Start () {
        this.oldTick = DateTime.Now.Ticks;
        this.menuPanelObj = GameObject.Find("MenuPanel");
        // 隐藏menuPanelObj
        this.menuPanelObj.SetActive(false);
        // 生成双方牌组
        putCard(GameObject.Find("MyPanel/FeatureDeck1/MainDeck"), createCard(-1,false));
        putCard(GameObject.Find("EnemyPanel/FeatureDeck1/MainDeck"), createCard(-1,false));
    }

    // Update is called once per frame
    void Update()
    {
        // 定时获取服务器游戏数据
        if (DateTime.Now.Ticks > this.oldTick + MainGame.tickDelta)
        {
            GetServiceGameLog();
            this.oldTick = DateTime.Now.Ticks;
        }
    }

    void putCard(GameObject contentObj, GameObject cardObj, int mode = 0)
    {
        cardObj.transform.SetParent(contentObj.transform);
        cardObj.GetComponent<RectTransform>().anchorMin = new Vector2(0.5f, 0.5f);
        cardObj.GetComponent<RectTransform>().anchorMax = new Vector2(0.5f, 0.5f);
        cardObj.GetComponent<RectTransform>().localPosition = new Vector3(0, 0, 0);
        cardObj.GetComponent<RectTransform>().SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical,
            contentObj.GetComponent<RectTransform>().rect.width);
        cardObj.GetComponent<RectTransform>().SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal,
            contentObj.GetComponent<RectTransform>().rect.width / 230 * 160);
        if (mode == 1)
        {
            cardObj.GetComponent<RectTransform>().Rotate(new Vector3(0,0,90));
        }
    }
    
    public void GetServiceGameLog()
    {
        Dictionary<string, object> paramsMap = new Dictionary<string, object>();
        paramsMap.Add("token", UserInfo.token);
        string response = HttpClient.sendGet(App.serverPath + "YgoService/duel-controller/get-inc-log",
            paramsMap);
        JsonData responseResult = JsonMapper.ToObject(response);
        if ((int)responseResult["code"] == 0)
        {
            // 非空表示有新消息
            if (responseResult["data"] != null)
            {
                Debug.Log(JsonMapper.ToJson(responseResult));
                string action = (string)responseResult["data"]["action"];
                switch (action)
                {
                    case "HandAdd":
                        DoHandAdd(responseResult);
                        break;
                    case "HandSub":
                        DoHandSub(responseResult);
                        break;
                    case "MonsterAdd":
                        DoMonsterAdd(responseResult);
                        break;
                    case "MonsterSub":
                        DoMonsterSub(responseResult);
                        break;
                    case "CemeteryAdd":
                        DoCemeteryAdd(responseResult);
                        break;
                    case "CemeterySub":
                        DoCemeterySub(responseResult);
                        break;
                    case "MagicAdd":
                        DoMagicAdd(responseResult);
                        break;
                    case "MagicSub":
                        DoMagicSub(responseResult);
                        break;
                    case "HPChange":
                        DoHPChange(responseResult);
                        break;
                }
            }
        }
        else
        {
            GUIOp.showMsg((string)responseResult["data"]);
        }
    }

    private void DoHPChange(JsonData responseResult)
    {
        // 获取参数
        string email = (string)responseResult["data"]["email"];
        int hpValue = (int)responseResult["data"]["paramsMap"]["HPValue"];
    }

    private void DoMagicSub(JsonData responseResult)
    {
        // 获取参数
        string email = (string)responseResult["data"]["email"];
        int cardIdx = (int)responseResult["data"]["paramsMap"]["CardIdx"];
        GameObject contentObj;
        if (email == UserInfo.email)
        {
            contentObj = GameObject.Find("MyPanel/DuelDeck/Magic/Magic" + cardIdx.ToString());
        }
        else
        {
            contentObj = GameObject.Find("EnemyPanel/DuelDeck/Magic/Magic" + cardIdx.ToString());
        }
        // 删除牌
        GameObject desCardObj = contentObj.transform.GetChild(0).gameObject;
        Destroy(desCardObj);
    }

    private void DoMagicAdd(JsonData responseResult)
    {
        // 获取参数
        string email = (string)responseResult["data"]["email"];
        int cardIdx = (int)responseResult["data"]["paramsMap"]["CardIdx"];
        int cardId = (int)responseResult["data"]["paramsMap"]["CardId"];
        int status = (int)responseResult["data"]["paramsMap"]["Status"];
        GameObject cardObj;
        GameObject contentObj;
        if (email == UserInfo.email)
        {
            cardObj = createCard(cardId, true);
            if (status == 0)
            {
                cardObj = createCard(cardIdx, false);
            }
            else
            {
                cardObj = createCard(cardIdx, true);
            }
            contentObj = GameObject.Find("MyPanel/DuelDeck/Magic/Magic" + cardIdx.ToString());
        }
        else
        {
            if (status == 0)
            {
                cardObj = createCard(-1, false);
            }
            else
            {
                cardObj = createCard(cardId, true);
            }
            contentObj = GameObject.Find("EnemyPanel/DuelDeck/Magic/Magic" + cardIdx.ToString());
        }
        if (status == 0)
        {
            putCard(contentObj, cardObj);
        }
        else
        {
            putCard(contentObj, cardObj);
        }
    }

    private void DoCemeterySub(JsonData responseResult)
    {
        // 获取参数
        string email = (string)responseResult["data"]["email"];
        int cardIdx = (int)responseResult["data"]["paramsMap"]["CardIdx"];
        GameObject contentObj;
        if(email == UserInfo.email)
        {
            contentObj = GameObject.Find("MyPanel/FeatureDeck1/Cemetery");
        }
        else
        {
            contentObj = GameObject.Find("EnemyPanel/FeatureDeck1/Cemetery");
        }
        Destroy(contentObj.transform.GetChild(cardIdx).gameObject);
    }

    private void DoCemeteryAdd(JsonData responseResult)
    {
        // 获取参数
        string email = (string)responseResult["data"]["email"];
        int cardId = (int)responseResult["data"]["paramsMap"]["CardId"];
        GameObject contentObj;
        if (email == UserInfo.email)
        {
            contentObj = GameObject.Find("MyPanel/FeatureDeck1/Cemetery");
        }
        else
        {
            contentObj = GameObject.Find("EnemyPanel/FeatureDeck1/Cemetery");
        }
        // 清空原先内容
        /*
        for (int i = 0;i < contentObj.transform.childCount;i++)
        {
            Destroy(contentObj.transform.GetChild(i).gameObject);
        }
        */
        putCard(contentObj, createCard(cardId, true));
    }

    private void DoMonsterSub(JsonData responseResult)
    {
        // 获取参数
        string email = (string)responseResult["data"]["email"];
        int cardIdx = (int)responseResult["data"]["paramsMap"]["CardIdx"];
        GameObject contentObj;
        if (email == UserInfo.email)
        {
            contentObj = GameObject.Find("MyPanel/DuelDeck/Monster/Monster" + cardIdx.ToString());
        }
        else
        {
            contentObj = GameObject.Find("EnemyPanel/DuelDeck/Monster/Monster" + cardIdx.ToString());
        }
        // 删除牌
        GameObject desCardObj = contentObj.transform.GetChild(0).gameObject;
        Destroy(desCardObj);
    }

    private void DoMonsterAdd(JsonData responseResult)
    {
        // 获取参数
        string email = (string)responseResult["data"]["email"];
        int cardIdx = (int)responseResult["data"]["paramsMap"]["CardIdx"];
        int cardId = (int)responseResult["data"]["paramsMap"]["CardId"];
        int status = (int)responseResult["data"]["paramsMap"]["Status"];
        GameObject cardObj;
        GameObject contentObj;
        if (email == UserInfo.email)
        {
            cardObj = createCard(cardId, true);
            if (status == 0)
            {
                cardObj = createCard(cardIdx, false);
            }else
            {
                cardObj = createCard(cardIdx, true);
            }
            contentObj = GameObject.Find("MyPanel/DuelDeck/Monster/Monster" + cardIdx.ToString());
        }
        else
        {
            if (status == 0)
            {
                cardObj = createCard(-1, false);
            }else
            {
                cardObj = createCard(cardId, true);
            }
            contentObj = GameObject.Find("EnemyPanel/DuelDeck/Monster/Monster" + cardIdx.ToString());
        }
        if (status == 0)
        {
            putCard(contentObj, cardObj, 1);
        }else
        {
            putCard(contentObj, cardObj);
        }
    }

    private void DoHandSub(JsonData responseResult)
    {
        // 获取参数
        string email = (string)responseResult["data"]["email"];
        int cardIdx = (int)responseResult["data"]["paramsMap"]["CardIdx"];
        GameObject handContentObj;
        if (email == UserInfo.email)
        {
            handContentObj = GameObject.Find("MHandPanel/Scroll View/Viewport/Content");
        }
        else
        {
            handContentObj = GameObject.Find("MHandPanel/Scroll View/Viewport/Content");
        }
        // 删除手牌
        GameObject desCardObj = handContentObj.transform.GetChild(cardIdx).gameObject;
        Destroy(desCardObj);
    }

    private void DoHandAdd(JsonData responseResult)
    {
        // 获取参数
        string email = (string)responseResult["data"]["email"];
        int cardId = (int)responseResult["data"]["paramsMap"]["CardId"];
        GameObject desCardObj;
        GameObject handContentObj;
        if (email == UserInfo.email)
        {
            desCardObj = createCard(cardId,true);
            handContentObj = GameObject.Find("MHandPanel/Scroll View/Viewport/Content");
        }
        else
        {
            desCardObj = createCard(-1,false);
            handContentObj = GameObject.Find("EHandPanel/Scroll View/Viewport/Content");
        }
        desCardObj.transform.SetParent(handContentObj.transform);
    }

    private GameObject createCard(int cardId,bool isShow)
    {
        GameObject cardPrefab = (GameObject)Resources.Load("fab/CardPrefab");
        GameObject cardObject = Instantiate(cardPrefab);
        cardObject.GetComponent<ShowCardInfo>().cardInfoImageObj = GameObject.Find("InfoPanel/CardInfoPanel/CardImage");
        cardObject.GetComponent<ShowCardInfo>().cardInfoTextObj = GameObject.Find("InfoPanel/CardInfoPanel/Scroll View/Viewport/Content/Text");
        cardObject.GetComponent<ShowCardInfo>().cardId = -1;
        if (!isShow)
        {
            cardObject.GetComponent<Image>().sprite = Resources.Load<Sprite>("image/CardBack");
        }
        else
        {
            cardObject.GetComponent<Image>().sprite = Resources.Load<Sprite>("image/CardImage/" + cardId.ToString());
        }
        return cardObject;
    }

    
}

